

/*
ScalaEdit - A text editor for Scala programmers
Copyright (C) 2011  Kjell Winblad (kjellwinblad@gmail.com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
*/

/*
OBS:This file is generated by project/build/ColorPropertiesGenerator.scala
*/

package me.winsh.scalaedit.gui

import me.winsh.scalaedit.api._
import java.io.File
import me.winsh.scalaedit.gui._
import java.awt.Color
import org.fife.ui.rtextarea._
import org.fife.ui.rsyntaxtextarea._
import java.awt.Font

class SyntaxHighlightingProperties
  extends PropertiesFile(new File(Utils.propertiesDir, "syntax_highlighting.properties"),
    "Editor Color Properties") {

  private val scheme = {
    val textArea = new RSyntaxTextArea(20, 60);
    textArea.getSyntaxScheme();
  }

  val commentDocumentationBackground = new ColorProperty("comment_documentation_background", scheme.styles(Token.COMMENT_DOCUMENTATION).background)

  val commentDocumentationForeground = new ColorProperty("comment_documentation_foreground", scheme.styles(Token.COMMENT_DOCUMENTATION).foreground)

  val commentDocumentationUnderline = new BooleanProperty("comment_documentation_underline", scheme.styles(Token.COMMENT_DOCUMENTATION).underline)

  val commentDocumentationBold = new BooleanProperty("comment_documentation_bold", {
    val font = scheme.styles(Token.COMMENT_DOCUMENTATION).font
    if (font == null) false else font.isBold
  })

  val commentDocumentationItalic = new BooleanProperty("comment_documentation_italic", {
    val font = scheme.styles(Token.COMMENT_DOCUMENTATION).font
    if (font == null) false else font.isItalic
  })

  val commentEolBackground = new ColorProperty("comment_eol_background", scheme.styles(Token.COMMENT_EOL).background)

  val commentEolForeground = new ColorProperty("comment_eol_foreground", scheme.styles(Token.COMMENT_EOL).foreground)

  val commentEolUnderline = new BooleanProperty("comment_eol_underline", scheme.styles(Token.COMMENT_EOL).underline)

  val commentEolBold = new BooleanProperty("comment_eol_bold", {
    val font = scheme.styles(Token.COMMENT_EOL).font
    if (font == null) false else font.isBold
  })

  val commentEolItalic = new BooleanProperty("comment_eol_italic", {
    val font = scheme.styles(Token.COMMENT_EOL).font
    if (font == null) false else font.isItalic
  })

  val commentMultilineBackground = new ColorProperty("comment_multiline_background", scheme.styles(Token.COMMENT_MULTILINE).background)

  val commentMultilineForeground = new ColorProperty("comment_multiline_foreground", scheme.styles(Token.COMMENT_MULTILINE).foreground)

  val commentMultilineUnderline = new BooleanProperty("comment_multiline_underline", scheme.styles(Token.COMMENT_MULTILINE).underline)

  val commentMultilineBold = new BooleanProperty("comment_multiline_bold", {
    val font = scheme.styles(Token.COMMENT_MULTILINE).font
    if (font == null) false else font.isBold
  })

  val commentMultilineItalic = new BooleanProperty("comment_multiline_italic", {
    val font = scheme.styles(Token.COMMENT_MULTILINE).font
    if (font == null) false else font.isItalic
  })

  val dataTypeBackground = new ColorProperty("data_type_background", scheme.styles(Token.DATA_TYPE).background)

  val dataTypeForeground = new ColorProperty("data_type_foreground", scheme.styles(Token.DATA_TYPE).foreground)

  val dataTypeUnderline = new BooleanProperty("data_type_underline", scheme.styles(Token.DATA_TYPE).underline)

  val dataTypeBold = new BooleanProperty("data_type_bold", {
    val font = scheme.styles(Token.DATA_TYPE).font
    if (font == null) false else font.isBold
  })

  val dataTypeItalic = new BooleanProperty("data_type_italic", {
    val font = scheme.styles(Token.DATA_TYPE).font
    if (font == null) false else font.isItalic
  })

  val errorCharBackground = new ColorProperty("error_char_background", scheme.styles(Token.ERROR_CHAR).background)

  val errorCharForeground = new ColorProperty("error_char_foreground", scheme.styles(Token.ERROR_CHAR).foreground)

  val errorCharUnderline = new BooleanProperty("error_char_underline", scheme.styles(Token.ERROR_CHAR).underline)

  val errorCharBold = new BooleanProperty("error_char_bold", {
    val font = scheme.styles(Token.ERROR_CHAR).font
    if (font == null) false else font.isBold
  })

  val errorCharItalic = new BooleanProperty("error_char_italic", {
    val font = scheme.styles(Token.ERROR_CHAR).font
    if (font == null) false else font.isItalic
  })

  val errorIdentifierBackground = new ColorProperty("error_identifier_background", scheme.styles(Token.ERROR_IDENTIFIER).background)

  val errorIdentifierForeground = new ColorProperty("error_identifier_foreground", scheme.styles(Token.ERROR_IDENTIFIER).foreground)

  val errorIdentifierUnderline = new BooleanProperty("error_identifier_underline", scheme.styles(Token.ERROR_IDENTIFIER).underline)

  val errorIdentifierBold = new BooleanProperty("error_identifier_bold", {
    val font = scheme.styles(Token.ERROR_IDENTIFIER).font
    if (font == null) false else font.isBold
  })

  val errorIdentifierItalic = new BooleanProperty("error_identifier_italic", {
    val font = scheme.styles(Token.ERROR_IDENTIFIER).font
    if (font == null) false else font.isItalic
  })

  val errorNumberFormatBackground = new ColorProperty("error_number_format_background", scheme.styles(Token.ERROR_NUMBER_FORMAT).background)

  val errorNumberFormatForeground = new ColorProperty("error_number_format_foreground", scheme.styles(Token.ERROR_NUMBER_FORMAT).foreground)

  val errorNumberFormatUnderline = new BooleanProperty("error_number_format_underline", scheme.styles(Token.ERROR_NUMBER_FORMAT).underline)

  val errorNumberFormatBold = new BooleanProperty("error_number_format_bold", {
    val font = scheme.styles(Token.ERROR_NUMBER_FORMAT).font
    if (font == null) false else font.isBold
  })

  val errorNumberFormatItalic = new BooleanProperty("error_number_format_italic", {
    val font = scheme.styles(Token.ERROR_NUMBER_FORMAT).font
    if (font == null) false else font.isItalic
  })

  val errorStringDoubleBackground = new ColorProperty("error_string_double_background", scheme.styles(Token.ERROR_STRING_DOUBLE).background)

  val errorStringDoubleForeground = new ColorProperty("error_string_double_foreground", scheme.styles(Token.ERROR_STRING_DOUBLE).foreground)

  val errorStringDoubleUnderline = new BooleanProperty("error_string_double_underline", scheme.styles(Token.ERROR_STRING_DOUBLE).underline)

  val errorStringDoubleBold = new BooleanProperty("error_string_double_bold", {
    val font = scheme.styles(Token.ERROR_STRING_DOUBLE).font
    if (font == null) false else font.isBold
  })

  val errorStringDoubleItalic = new BooleanProperty("error_string_double_italic", {
    val font = scheme.styles(Token.ERROR_STRING_DOUBLE).font
    if (font == null) false else font.isItalic
  })

  val functionBackground = new ColorProperty("function_background", scheme.styles(Token.FUNCTION).background)

  val functionForeground = new ColorProperty("function_foreground", scheme.styles(Token.FUNCTION).foreground)

  val functionUnderline = new BooleanProperty("function_underline", scheme.styles(Token.FUNCTION).underline)

  val functionBold = new BooleanProperty("function_bold", {
    val font = scheme.styles(Token.FUNCTION).font
    if (font == null) false else font.isBold
  })

  val functionItalic = new BooleanProperty("function_italic", {
    val font = scheme.styles(Token.FUNCTION).font
    if (font == null) false else font.isItalic
  })

  val identifierBackground = new ColorProperty("identifier_background", scheme.styles(Token.IDENTIFIER).background)

  val identifierForeground = new ColorProperty("identifier_foreground", scheme.styles(Token.IDENTIFIER).foreground)

  val identifierUnderline = new BooleanProperty("identifier_underline", scheme.styles(Token.IDENTIFIER).underline)

  val identifierBold = new BooleanProperty("identifier_bold", {
    val font = scheme.styles(Token.IDENTIFIER).font
    if (font == null) false else font.isBold
  })

  val identifierItalic = new BooleanProperty("identifier_italic", {
    val font = scheme.styles(Token.IDENTIFIER).font
    if (font == null) false else font.isItalic
  })

  val literalBackquoteBackground = new ColorProperty("literal_backquote_background", scheme.styles(Token.LITERAL_BACKQUOTE).background)

  val literalBackquoteForeground = new ColorProperty("literal_backquote_foreground", scheme.styles(Token.LITERAL_BACKQUOTE).foreground)

  val literalBackquoteUnderline = new BooleanProperty("literal_backquote_underline", scheme.styles(Token.LITERAL_BACKQUOTE).underline)

  val literalBackquoteBold = new BooleanProperty("literal_backquote_bold", {
    val font = scheme.styles(Token.LITERAL_BACKQUOTE).font
    if (font == null) false else font.isBold
  })

  val literalBackquoteItalic = new BooleanProperty("literal_backquote_italic", {
    val font = scheme.styles(Token.LITERAL_BACKQUOTE).font
    if (font == null) false else font.isItalic
  })

  val literalBooleanBackground = new ColorProperty("literal_boolean_background", scheme.styles(Token.LITERAL_BOOLEAN).background)

  val literalBooleanForeground = new ColorProperty("literal_boolean_foreground", scheme.styles(Token.LITERAL_BOOLEAN).foreground)

  val literalBooleanUnderline = new BooleanProperty("literal_boolean_underline", scheme.styles(Token.LITERAL_BOOLEAN).underline)

  val literalBooleanBold = new BooleanProperty("literal_boolean_bold", {
    val font = scheme.styles(Token.LITERAL_BOOLEAN).font
    if (font == null) false else font.isBold
  })

  val literalBooleanItalic = new BooleanProperty("literal_boolean_italic", {
    val font = scheme.styles(Token.LITERAL_BOOLEAN).font
    if (font == null) false else font.isItalic
  })

  val literalCharBackground = new ColorProperty("literal_char_background", scheme.styles(Token.LITERAL_CHAR).background)

  val literalCharForeground = new ColorProperty("literal_char_foreground", scheme.styles(Token.LITERAL_CHAR).foreground)

  val literalCharUnderline = new BooleanProperty("literal_char_underline", scheme.styles(Token.LITERAL_CHAR).underline)

  val literalCharBold = new BooleanProperty("literal_char_bold", {
    val font = scheme.styles(Token.LITERAL_CHAR).font
    if (font == null) false else font.isBold
  })

  val literalCharItalic = new BooleanProperty("literal_char_italic", {
    val font = scheme.styles(Token.LITERAL_CHAR).font
    if (font == null) false else font.isItalic
  })

  val literalNumberDecimalIntBackground = new ColorProperty("literal_number_decimal_int_background", scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).background)

  val literalNumberDecimalIntForeground = new ColorProperty("literal_number_decimal_int_foreground", scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).foreground)

  val literalNumberDecimalIntUnderline = new BooleanProperty("literal_number_decimal_int_underline", scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).underline)

  val literalNumberDecimalIntBold = new BooleanProperty("literal_number_decimal_int_bold", {
    val font = scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).font
    if (font == null) false else font.isBold
  })

  val literalNumberDecimalIntItalic = new BooleanProperty("literal_number_decimal_int_italic", {
    val font = scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).font
    if (font == null) false else font.isItalic
  })

  val literalNumberFloatBackground = new ColorProperty("literal_number_float_background", scheme.styles(Token.LITERAL_NUMBER_FLOAT).background)

  val literalNumberFloatForeground = new ColorProperty("literal_number_float_foreground", scheme.styles(Token.LITERAL_NUMBER_FLOAT).foreground)

  val literalNumberFloatUnderline = new BooleanProperty("literal_number_float_underline", scheme.styles(Token.LITERAL_NUMBER_FLOAT).underline)

  val literalNumberFloatBold = new BooleanProperty("literal_number_float_bold", {
    val font = scheme.styles(Token.LITERAL_NUMBER_FLOAT).font
    if (font == null) false else font.isBold
  })

  val literalNumberFloatItalic = new BooleanProperty("literal_number_float_italic", {
    val font = scheme.styles(Token.LITERAL_NUMBER_FLOAT).font
    if (font == null) false else font.isItalic
  })

  val literalNumberHexadecimalBackground = new ColorProperty("literal_number_hexadecimal_background", scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).background)

  val literalNumberHexadecimalForeground = new ColorProperty("literal_number_hexadecimal_foreground", scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).foreground)

  val literalNumberHexadecimalUnderline = new BooleanProperty("literal_number_hexadecimal_underline", scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).underline)

  val literalNumberHexadecimalBold = new BooleanProperty("literal_number_hexadecimal_bold", {
    val font = scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).font
    if (font == null) false else font.isBold
  })

  val literalNumberHexadecimalItalic = new BooleanProperty("literal_number_hexadecimal_italic", {
    val font = scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).font
    if (font == null) false else font.isItalic
  })

  val literalStringDoubleQuoteBackground = new ColorProperty("literal_string_double_quote_background", scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).background)

  val literalStringDoubleQuoteForeground = new ColorProperty("literal_string_double_quote_foreground", scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground)

  val literalStringDoubleQuoteUnderline = new BooleanProperty("literal_string_double_quote_underline", scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).underline)

  val literalStringDoubleQuoteBold = new BooleanProperty("literal_string_double_quote_bold", {
    val font = scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).font
    if (font == null) false else font.isBold
  })

  val literalStringDoubleQuoteItalic = new BooleanProperty("literal_string_double_quote_italic", {
    val font = scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).font
    if (font == null) false else font.isItalic
  })

  val markupTagAttributeBackground = new ColorProperty("markup_tag_attribute_background", scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).background)

  val markupTagAttributeForeground = new ColorProperty("markup_tag_attribute_foreground", scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).foreground)

  val markupTagAttributeUnderline = new BooleanProperty("markup_tag_attribute_underline", scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).underline)

  val markupTagAttributeBold = new BooleanProperty("markup_tag_attribute_bold", {
    val font = scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).font
    if (font == null) false else font.isBold
  })

  val markupTagAttributeItalic = new BooleanProperty("markup_tag_attribute_italic", {
    val font = scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).font
    if (font == null) false else font.isItalic
  })

  val markupTagDelimiterBackground = new ColorProperty("markup_tag_delimiter_background", scheme.styles(Token.MARKUP_TAG_DELIMITER).background)

  val markupTagDelimiterForeground = new ColorProperty("markup_tag_delimiter_foreground", scheme.styles(Token.MARKUP_TAG_DELIMITER).foreground)

  val markupTagDelimiterUnderline = new BooleanProperty("markup_tag_delimiter_underline", scheme.styles(Token.MARKUP_TAG_DELIMITER).underline)

  val markupTagDelimiterBold = new BooleanProperty("markup_tag_delimiter_bold", {
    val font = scheme.styles(Token.MARKUP_TAG_DELIMITER).font
    if (font == null) false else font.isBold
  })

  val markupTagDelimiterItalic = new BooleanProperty("markup_tag_delimiter_italic", {
    val font = scheme.styles(Token.MARKUP_TAG_DELIMITER).font
    if (font == null) false else font.isItalic
  })

  val markupTagNameBackground = new ColorProperty("markup_tag_name_background", scheme.styles(Token.MARKUP_TAG_NAME).background)

  val markupTagNameForeground = new ColorProperty("markup_tag_name_foreground", scheme.styles(Token.MARKUP_TAG_NAME).foreground)

  val markupTagNameUnderline = new BooleanProperty("markup_tag_name_underline", scheme.styles(Token.MARKUP_TAG_NAME).underline)

  val markupTagNameBold = new BooleanProperty("markup_tag_name_bold", {
    val font = scheme.styles(Token.MARKUP_TAG_NAME).font
    if (font == null) false else font.isBold
  })

  val markupTagNameItalic = new BooleanProperty("markup_tag_name_italic", {
    val font = scheme.styles(Token.MARKUP_TAG_NAME).font
    if (font == null) false else font.isItalic
  })

  val operatorBackground = new ColorProperty("operator_background", scheme.styles(Token.OPERATOR).background)

  val operatorForeground = new ColorProperty("operator_foreground", scheme.styles(Token.OPERATOR).foreground)

  val operatorUnderline = new BooleanProperty("operator_underline", scheme.styles(Token.OPERATOR).underline)

  val operatorBold = new BooleanProperty("operator_bold", {
    val font = scheme.styles(Token.OPERATOR).font
    if (font == null) false else font.isBold
  })

  val operatorItalic = new BooleanProperty("operator_italic", {
    val font = scheme.styles(Token.OPERATOR).font
    if (font == null) false else font.isItalic
  })

  val preprocessorBackground = new ColorProperty("preprocessor_background", scheme.styles(Token.PREPROCESSOR).background)

  val preprocessorForeground = new ColorProperty("preprocessor_foreground", scheme.styles(Token.PREPROCESSOR).foreground)

  val preprocessorUnderline = new BooleanProperty("preprocessor_underline", scheme.styles(Token.PREPROCESSOR).underline)

  val preprocessorBold = new BooleanProperty("preprocessor_bold", {
    val font = scheme.styles(Token.PREPROCESSOR).font
    if (font == null) false else font.isBold
  })

  val preprocessorItalic = new BooleanProperty("preprocessor_italic", {
    val font = scheme.styles(Token.PREPROCESSOR).font
    if (font == null) false else font.isItalic
  })

  val reservedWordBackground = new ColorProperty("reserved_word_background", scheme.styles(Token.RESERVED_WORD).background)

  val reservedWordForeground = new ColorProperty("reserved_word_foreground", scheme.styles(Token.RESERVED_WORD).foreground)

  val reservedWordUnderline = new BooleanProperty("reserved_word_underline", scheme.styles(Token.RESERVED_WORD).underline)

  val reservedWordBold = new BooleanProperty("reserved_word_bold", {
    val font = scheme.styles(Token.RESERVED_WORD).font
    if (font == null) false else font.isBold
  })

  val reservedWordItalic = new BooleanProperty("reserved_word_italic", {
    val font = scheme.styles(Token.RESERVED_WORD).font
    if (font == null) false else font.isItalic
  })

  val separatorBackground = new ColorProperty("separator_background", scheme.styles(Token.SEPARATOR).background)

  val separatorForeground = new ColorProperty("separator_foreground", scheme.styles(Token.SEPARATOR).foreground)

  val separatorUnderline = new BooleanProperty("separator_underline", scheme.styles(Token.SEPARATOR).underline)

  val separatorBold = new BooleanProperty("separator_bold", {
    val font = scheme.styles(Token.SEPARATOR).font
    if (font == null) false else font.isBold
  })

  val separatorItalic = new BooleanProperty("separator_italic", {
    val font = scheme.styles(Token.SEPARATOR).font
    if (font == null) false else font.isItalic
  })

  val variableBackground = new ColorProperty("variable_background", scheme.styles(Token.VARIABLE).background)

  val variableForeground = new ColorProperty("variable_foreground", scheme.styles(Token.VARIABLE).foreground)

  val variableUnderline = new BooleanProperty("variable_underline", scheme.styles(Token.VARIABLE).underline)

  val variableBold = new BooleanProperty("variable_bold", {
    val font = scheme.styles(Token.VARIABLE).font
    if (font == null) false else font.isBold
  })

  val variableItalic = new BooleanProperty("variable_italic", {
    val font = scheme.styles(Token.VARIABLE).font
    if (font == null) false else font.isItalic
  })

  val whitespaceBackground = new ColorProperty("whitespace_background", scheme.styles(Token.WHITESPACE).background)

  val whitespaceForeground = new ColorProperty("whitespace_foreground", scheme.styles(Token.WHITESPACE).foreground)

  val whitespaceUnderline = new BooleanProperty("whitespace_underline", scheme.styles(Token.WHITESPACE).underline)

  val whitespaceBold = new BooleanProperty("whitespace_bold", {
    val font = scheme.styles(Token.WHITESPACE).font
    if (font == null) false else font.isBold
  })

  val whitespaceItalic = new BooleanProperty("whitespace_italic", {
    val font = scheme.styles(Token.WHITESPACE).font
    if (font == null) false else font.isItalic
  })

  def schemeFromProps(font: Font) = {
    val textArea = new RSyntaxTextArea(20, 60);

    val scheme = textArea.getSyntaxScheme();

    scheme.styles(Token.COMMENT_DOCUMENTATION).background = commentDocumentationBackground.get

    scheme.styles(Token.COMMENT_DOCUMENTATION).foreground = commentDocumentationForeground.get

    scheme.styles(Token.COMMENT_DOCUMENTATION).underline = commentDocumentationUnderline.get

    scheme.styles(Token.COMMENT_DOCUMENTATION).font = new Font(font.getName(), {
      ((if (commentDocumentationBold.get) List(Font.BOLD) else Nil) :::
        (if (commentDocumentationItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.COMMENT_EOL).background = commentEolBackground.get

    scheme.styles(Token.COMMENT_EOL).foreground = commentEolForeground.get

    scheme.styles(Token.COMMENT_EOL).underline = commentEolUnderline.get

    scheme.styles(Token.COMMENT_EOL).font = new Font(font.getName(), {
      ((if (commentEolBold.get) List(Font.BOLD) else Nil) :::
        (if (commentEolItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.COMMENT_MULTILINE).background = commentMultilineBackground.get

    scheme.styles(Token.COMMENT_MULTILINE).foreground = commentMultilineForeground.get

    scheme.styles(Token.COMMENT_MULTILINE).underline = commentMultilineUnderline.get

    scheme.styles(Token.COMMENT_MULTILINE).font = new Font(font.getName(), {
      ((if (commentMultilineBold.get) List(Font.BOLD) else Nil) :::
        (if (commentMultilineItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.DATA_TYPE).background = dataTypeBackground.get

    scheme.styles(Token.DATA_TYPE).foreground = dataTypeForeground.get

    scheme.styles(Token.DATA_TYPE).underline = dataTypeUnderline.get

    scheme.styles(Token.DATA_TYPE).font = new Font(font.getName(), {
      ((if (dataTypeBold.get) List(Font.BOLD) else Nil) :::
        (if (dataTypeItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.ERROR_CHAR).background = errorCharBackground.get

    scheme.styles(Token.ERROR_CHAR).foreground = errorCharForeground.get

    scheme.styles(Token.ERROR_CHAR).underline = errorCharUnderline.get

    scheme.styles(Token.ERROR_CHAR).font = new Font(font.getName(), {
      ((if (errorCharBold.get) List(Font.BOLD) else Nil) :::
        (if (errorCharItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.ERROR_IDENTIFIER).background = errorIdentifierBackground.get

    scheme.styles(Token.ERROR_IDENTIFIER).foreground = errorIdentifierForeground.get

    scheme.styles(Token.ERROR_IDENTIFIER).underline = errorIdentifierUnderline.get

    scheme.styles(Token.ERROR_IDENTIFIER).font = new Font(font.getName(), {
      ((if (errorIdentifierBold.get) List(Font.BOLD) else Nil) :::
        (if (errorIdentifierItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.ERROR_NUMBER_FORMAT).background = errorNumberFormatBackground.get

    scheme.styles(Token.ERROR_NUMBER_FORMAT).foreground = errorNumberFormatForeground.get

    scheme.styles(Token.ERROR_NUMBER_FORMAT).underline = errorNumberFormatUnderline.get

    scheme.styles(Token.ERROR_NUMBER_FORMAT).font = new Font(font.getName(), {
      ((if (errorNumberFormatBold.get) List(Font.BOLD) else Nil) :::
        (if (errorNumberFormatItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.ERROR_STRING_DOUBLE).background = errorStringDoubleBackground.get

    scheme.styles(Token.ERROR_STRING_DOUBLE).foreground = errorStringDoubleForeground.get

    scheme.styles(Token.ERROR_STRING_DOUBLE).underline = errorStringDoubleUnderline.get

    scheme.styles(Token.ERROR_STRING_DOUBLE).font = new Font(font.getName(), {
      ((if (errorStringDoubleBold.get) List(Font.BOLD) else Nil) :::
        (if (errorStringDoubleItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.FUNCTION).background = functionBackground.get

    scheme.styles(Token.FUNCTION).foreground = functionForeground.get

    scheme.styles(Token.FUNCTION).underline = functionUnderline.get

    scheme.styles(Token.FUNCTION).font = new Font(font.getName(), {
      ((if (functionBold.get) List(Font.BOLD) else Nil) :::
        (if (functionItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.IDENTIFIER).background = identifierBackground.get

    scheme.styles(Token.IDENTIFIER).foreground = identifierForeground.get

    scheme.styles(Token.IDENTIFIER).underline = identifierUnderline.get

    scheme.styles(Token.IDENTIFIER).font = new Font(font.getName(), {
      ((if (identifierBold.get) List(Font.BOLD) else Nil) :::
        (if (identifierItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_BACKQUOTE).background = literalBackquoteBackground.get

    scheme.styles(Token.LITERAL_BACKQUOTE).foreground = literalBackquoteForeground.get

    scheme.styles(Token.LITERAL_BACKQUOTE).underline = literalBackquoteUnderline.get

    scheme.styles(Token.LITERAL_BACKQUOTE).font = new Font(font.getName(), {
      ((if (literalBackquoteBold.get) List(Font.BOLD) else Nil) :::
        (if (literalBackquoteItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_BOOLEAN).background = literalBooleanBackground.get

    scheme.styles(Token.LITERAL_BOOLEAN).foreground = literalBooleanForeground.get

    scheme.styles(Token.LITERAL_BOOLEAN).underline = literalBooleanUnderline.get

    scheme.styles(Token.LITERAL_BOOLEAN).font = new Font(font.getName(), {
      ((if (literalBooleanBold.get) List(Font.BOLD) else Nil) :::
        (if (literalBooleanItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_CHAR).background = literalCharBackground.get

    scheme.styles(Token.LITERAL_CHAR).foreground = literalCharForeground.get

    scheme.styles(Token.LITERAL_CHAR).underline = literalCharUnderline.get

    scheme.styles(Token.LITERAL_CHAR).font = new Font(font.getName(), {
      ((if (literalCharBold.get) List(Font.BOLD) else Nil) :::
        (if (literalCharItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).background = literalNumberDecimalIntBackground.get

    scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).foreground = literalNumberDecimalIntForeground.get

    scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).underline = literalNumberDecimalIntUnderline.get

    scheme.styles(Token.LITERAL_NUMBER_DECIMAL_INT).font = new Font(font.getName(), {
      ((if (literalNumberDecimalIntBold.get) List(Font.BOLD) else Nil) :::
        (if (literalNumberDecimalIntItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_NUMBER_FLOAT).background = literalNumberFloatBackground.get

    scheme.styles(Token.LITERAL_NUMBER_FLOAT).foreground = literalNumberFloatForeground.get

    scheme.styles(Token.LITERAL_NUMBER_FLOAT).underline = literalNumberFloatUnderline.get

    scheme.styles(Token.LITERAL_NUMBER_FLOAT).font = new Font(font.getName(), {
      ((if (literalNumberFloatBold.get) List(Font.BOLD) else Nil) :::
        (if (literalNumberFloatItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).background = literalNumberHexadecimalBackground.get

    scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).foreground = literalNumberHexadecimalForeground.get

    scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).underline = literalNumberHexadecimalUnderline.get

    scheme.styles(Token.LITERAL_NUMBER_HEXADECIMAL).font = new Font(font.getName(), {
      ((if (literalNumberHexadecimalBold.get) List(Font.BOLD) else Nil) :::
        (if (literalNumberHexadecimalItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).background = literalStringDoubleQuoteBackground.get

    scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).foreground = literalStringDoubleQuoteForeground.get

    scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).underline = literalStringDoubleQuoteUnderline.get

    scheme.styles(Token.LITERAL_STRING_DOUBLE_QUOTE).font = new Font(font.getName(), {
      ((if (literalStringDoubleQuoteBold.get) List(Font.BOLD) else Nil) :::
        (if (literalStringDoubleQuoteItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).background = markupTagAttributeBackground.get

    scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).foreground = markupTagAttributeForeground.get

    scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).underline = markupTagAttributeUnderline.get

    scheme.styles(Token.MARKUP_TAG_ATTRIBUTE).font = new Font(font.getName(), {
      ((if (markupTagAttributeBold.get) List(Font.BOLD) else Nil) :::
        (if (markupTagAttributeItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.MARKUP_TAG_DELIMITER).background = markupTagDelimiterBackground.get

    scheme.styles(Token.MARKUP_TAG_DELIMITER).foreground = markupTagDelimiterForeground.get

    scheme.styles(Token.MARKUP_TAG_DELIMITER).underline = markupTagDelimiterUnderline.get

    scheme.styles(Token.MARKUP_TAG_DELIMITER).font = new Font(font.getName(), {
      ((if (markupTagDelimiterBold.get) List(Font.BOLD) else Nil) :::
        (if (markupTagDelimiterItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.MARKUP_TAG_NAME).background = markupTagNameBackground.get

    scheme.styles(Token.MARKUP_TAG_NAME).foreground = markupTagNameForeground.get

    scheme.styles(Token.MARKUP_TAG_NAME).underline = markupTagNameUnderline.get

    scheme.styles(Token.MARKUP_TAG_NAME).font = new Font(font.getName(), {
      ((if (markupTagNameBold.get) List(Font.BOLD) else Nil) :::
        (if (markupTagNameItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.OPERATOR).background = operatorBackground.get

    scheme.styles(Token.OPERATOR).foreground = operatorForeground.get

    scheme.styles(Token.OPERATOR).underline = operatorUnderline.get

    scheme.styles(Token.OPERATOR).font = new Font(font.getName(), {
      ((if (operatorBold.get) List(Font.BOLD) else Nil) :::
        (if (operatorItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.PREPROCESSOR).background = preprocessorBackground.get

    scheme.styles(Token.PREPROCESSOR).foreground = preprocessorForeground.get

    scheme.styles(Token.PREPROCESSOR).underline = preprocessorUnderline.get

    scheme.styles(Token.PREPROCESSOR).font = new Font(font.getName(), {
      ((if (preprocessorBold.get) List(Font.BOLD) else Nil) :::
        (if (preprocessorItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.RESERVED_WORD).background = reservedWordBackground.get

    scheme.styles(Token.RESERVED_WORD).foreground = reservedWordForeground.get

    scheme.styles(Token.RESERVED_WORD).underline = reservedWordUnderline.get

    scheme.styles(Token.RESERVED_WORD).font = new Font(font.getName(), {
      ((if (reservedWordBold.get) List(Font.BOLD) else Nil) :::
        (if (reservedWordItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.SEPARATOR).background = separatorBackground.get

    scheme.styles(Token.SEPARATOR).foreground = separatorForeground.get

    scheme.styles(Token.SEPARATOR).underline = separatorUnderline.get

    scheme.styles(Token.SEPARATOR).font = new Font(font.getName(), {
      ((if (separatorBold.get) List(Font.BOLD) else Nil) :::
        (if (separatorItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.VARIABLE).background = variableBackground.get

    scheme.styles(Token.VARIABLE).foreground = variableForeground.get

    scheme.styles(Token.VARIABLE).underline = variableUnderline.get

    scheme.styles(Token.VARIABLE).font = new Font(font.getName(), {
      ((if (variableBold.get) List(Font.BOLD) else Nil) :::
        (if (variableItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme.styles(Token.WHITESPACE).background = whitespaceBackground.get

    scheme.styles(Token.WHITESPACE).foreground = whitespaceForeground.get

    scheme.styles(Token.WHITESPACE).underline = whitespaceUnderline.get

    scheme.styles(Token.WHITESPACE).font = new Font(font.getName(), {
      ((if (whitespaceBold.get) List(Font.BOLD) else Nil) :::
        (if (whitespaceItalic.get) List(Font.ITALIC) else Nil)).foldLeft(0)(_ | _)
    }, font.getSize)

    scheme
  }

}
